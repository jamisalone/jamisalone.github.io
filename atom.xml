<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-09T07:41:10.587Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Sht</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>与你共事过的工程师，谁是最好的？</title>
    <link href="http://example.com/2021/04/09/Who-s-the-Best-Engineer-You-ve-Worked-With/"/>
    <id>http://example.com/2021/04/09/Who-s-the-Best-Engineer-You-ve-Worked-With/</id>
    <published>2021-04-09T07:24:54.000Z</published>
    <updated>2021-04-09T07:41:10.587Z</updated>
    
    <content type="html"><![CDATA[<p>每次我在面试至少和我一样有经验的人时都会问这个问题。当我面试求职者时，我也会问这个问题；当我申请一个新的职位时，我也会问这个问题。我并不关心那个工程师的名字是什么，或者他们在哪里工作过。我之所以问这个问题，是因为这个问题似乎闻所未闻，大多数人都没有现成的答案，而且它始终能激发出有见地的对话。</p><p>作为面试官，我问高级软件工程师这个问题。当他们解释原因时，我关注几点。他们真的知道为什么那个人是他们合作过的最好的人吗？如果他们能勉强解释原因，我就会认为这是一个暗示，这个人的工作经验比我希望的要少。如果你不能解释为什么一个最优秀的(greatest)工程师是最优秀的，那你自己打算怎么去做呢？我理解当你要求某人描述为什么某人在某件事上如此优秀时，会出现因果难定情形——他们无法回答，因为如果他们能回答，岂不是知道秘诀，也该同样优秀？相反，我想听听那位最优秀的工程师对受访者的影响：他们影响你的程度如何？你学到了什么？这些问题的答案是否肤浅？受访者是否能意识到这个人对他们的影响，还是他们在追赶(reach for)能第一个在脑海中浮现的前同事？理由是否令人信服，是否与我希望雇佣的人一致？毕竟，这个面试者脑海中的英雄是他们在技术和行为上会寻找灵感的对象。我想通过他们来面试他们脑海中的那个人。</p><p>而且，亲爱的上帝，<strong>他们会把自己作为问题的答案吗</strong>？</p><p>当我面试的时候，我真的会向与我谈判的公司管理人的人提出这个问题。它需要0.02秒的时间来意识到一个答案是天才的、深思熟虑的，还是包装过的、假的，我想这是一个很好的晴雨表(barometer)，可以看出我作为一个员工会得到多少尊重。<strong>当我得到一个深思熟虑的回答时，我会倾听各种暗示</strong>。他们会不会是因为某些错误的原因而成为最好的？我对一家公司和经理抱有期望，很明显有些时候，我的这些期望和面试官认为的好的东西不会很一致。没关系，我觉得尽快注意到这些差异(discrepancy)很重要。请不要说与你合作过的或者雇佣过的最好的(best)工程师是最优秀的(greatest)，因为他们工作时间长，而且从来没有给你不好的反馈(bad feedback)。相反，我希望他们告诉我这个工程师与他人合作得多么好，或者他们是如何在最少干预的情况下带领团队完成艰难的项目的——这类东西能吸引我的注意力(that sort of stuff sparks my attention)。一个管理者应该能够毫不犹豫地深入回答这个问题。</p><p>某人愿意指出具体的人，并给予表扬，也会让我觉得他很突出。有人会对过去或现在的同事有这么好的评价，在我看来，这表示这个人的人品还不赖。</p><p>我通常喜欢在对话中插入进一步的问题，提出进一步的问题，把他们引向更深的道路。我喜欢听具体的例子来说明某人在什么时候很厉害。我知道面试官和被面试者都喜欢这个问题，因为很多人都曾这样告诉我。谁不喜欢时不时地追忆一下往昔呢？这是一种令人愉快的方式，既能聊到软件开发的乐趣，又能挖掘出关于一个人或一段过程的见解。我敢打赌，这个问题几乎可以适用于任何领域，真的。你合作过的最好的产品经理是谁？谁是你合作过的最好的销售人员？这是一个非常开放的问题，可以引出深入的对话。</p><p>原文链接🔗：<a class="link" href="https://des.wtf/whos-the-best-engineer-youve-worked-with/?continueFlag=d5cb040d4d90bbd38fb637cc8c5553a3">https://des.wtf/whos-the-best-engineer-youve-worked-with/?continueFlag=d5cb040d4d90bbd38fb637cc8c5553a3<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">【译文】在职场中，都会存在一个学习的榜样，或许是你的主管，亦或是同部门的前辈，可以从他们身上学习你所不具备的能力，充实你的职业技能包，让“经过别人实践的优秀能力”为自己所用。</summary>
    
    
    
    <category term="Work" scheme="http://example.com/categories/Work/"/>
    
    
    <category term="职业发展" scheme="http://example.com/tags/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/"/>
    
    <category term="职场之道" scheme="http://example.com/tags/%E8%81%8C%E5%9C%BA%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>网络自动化时代的技能与教育[译]</title>
    <link href="http://example.com/2021/04/07/Skills-and-Education-in-Network-Automation/"/>
    <id>http://example.com/2021/04/07/Skills-and-Education-in-Network-Automation/</id>
    <published>2021-04-07T15:11:00.000Z</published>
    <updated>2021-04-08T03:16:32.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技能与教育"><a href="#技能与教育" class="headerlink" title="技能与教育"></a>技能与教育</h1><p>在IT行业，拥有正确的技能一直很重要，尤其是当你想跟别的工程师有所区分的时候。随着变化的进程不断加快，你会发现你最喜欢的技术栈已经被新的东西所取代，拥有正确的技能无疑会变得更加重要。</p><p>如果你正在阅读本书，恭喜你——你已经在正确的方向上迈出了伟大的第一步。本书的各章是写给那些正在寻找”更多”的东西、不满足于过去几十年以厂商为中心的<strong>传统投币模式</strong>的IT专业人士的。</p><p>我们将深入研究几个具体的重点领域，以提高你的IT教育，并将你的技能包带到下一阶段。</p><h2 id="学你所不知"><a href="#学你所不知" class="headerlink" title="学你所不知"></a>学你所不知</h2><p>当我们与同行或客户谈论他们可以做什么样的事情来开始自动化时，最常见的反应之一是：“我甚至都不知道这是可能的！”</p><p>事实上，在IT行业工作有一种<strong>倾向</strong>，就是让人封闭在一个泡泡中：不断听到相同信息的不同版本，并且手头上几乎都处理着相同的工作。对技术专家来说，这是最危险的情况之一，因为这比单纯的不了解另一项技术学科(technical discipline)更糟糕。在这种情况下，你不了解你未涉猎的领域。你可能从来没有想过你可以用Python来控制你的杂物间的开关，因为这种控制场景从未进入过你的眼界。如果你只是呆在泡泡中，你将不知道外面有什么，也很难成长为一个技术专家。</p><p>幸运的是，预防这种情况很简单。经常性地走出你的舒适区。跳入某种在你的”泡泡”之外运作的环境。有足够多的技术能让你生趣，在你挑战自我去探索一个新的领域之前，你甚至永远都不会发现它们。</p><p>这将为你自己的职业发展带来巨大的价值，但它也从本质上为你的组织带来了新鲜想法。这种好处并不总是切实易见的(tangible)，这一点可以通过获得参加会议(尤其是你的技术学科之外的会议)的资格是多么难得来证明。如果你所在的职务能负责决定投资哪些会议，请意识到这是将新鲜想法带入你的组织最经济(the least expensive)的方式之一。</p><p>总之，要学会走出舒适区。在企业IT领域，技术不会有太大的变化，因为我们的文化非常重视和依附于IT厂商。这些厂商的既得利益是保持事物的不变(constant)；快速变化不符合他们的销售模式。<strong>我们可以做的一件事就是不要再从厂商那里获得所有的想法和指导</strong>。与其去参加你的厂商为期一周的大型营销活动，不如去参加一些小型见面会，比如你当地的网络运营商团队。或者也许去查看一些完全不在你技能包范围内的会议，比如开发者或自动化会议。</p><h2 id="重视基础"><a href="#重视基础" class="headerlink" title="重视基础"></a>重视基础</h2><p>在任何技术学科中，我们总是听到一些新名词，如“数字化转型(digital transformation)”和“软件定义(software defined)”来描述最新的耀眼的技术进入市场。这些术语带给你的感觉就是——你在技术领域中已经落后了，购买最新的物理产品或虚拟产品将使你回到技术领域的前沿。</p><p>事实上，就技术方面来说，我们大多数人其实都有点落后于时代。尤其是在企业IT领域，跟硅谷公司正在使用的且被认为是最前沿的技术相比，技术栈可能落后5年、10年甚至更多。然而，从你的厂商那里购买最新的耀眼产品从来没有(never has)并且也将不会(never will)为你解决技术落后的问题。如果能够通过购买新产品解决技术落后问题，我们早就解决这个问题了。技术停滞不前的真正原因是，除了传统的厂商驱动的消息和我们时不时的盲从([译者注：盲从指企图通过购买新产品来解决技术落后问题])，我们对人才和技能的投资是不足的。</p><p>本书主要关注的是<strong>与厂商无关的技能包、流程和文化</strong>，原因是<strong>技术并没有真正发生太大的变化</strong>。速度和流量(speeds and feeds)变得更大、更好，行业有时能够倾向于往奇怪的方向发展，它总是<strong>摇摆不定</strong> (it’s always a pendulum)。<strong>旧的模式又变成了新的模式，而最底层使用的基本技术通常是相同的</strong>。你从最早的CCNA时代就熟知和喜爱的TCP/IP，最新的软件定义网络产品仍与它紧密相关。最新的无线产品的核心还是要还原到射频技术(RF，Radio Frequency)。</p><p>这是基础设施从业人员可以向软件开发人员学习的经验之一。一般来说，基础设施从业人员的“建设”能力不如“运维”能力，而软件开发人员则习惯于像建设者那样思考([译者注：即一般来说，软件开发人员建设能力更强])。为此，软件开发与其说是一项技能，不如说是微小技能的集合。就像画家学习画笔技巧和调色科学一样，软件开发人员也会学习编程语言、工具、算法和硬件知识，他们明白，当下一个大项目需要他们时，这些微小技能终将在那一天派上用场。</p><p>如今，特别是随着开源软件在IT领域越来越重要，对系统或计算机科学基础的需求从未达到如此之高。学习Linux。探索一种编程语言。这些基础知识将帮助引导你更多地理解我们长期以来在IT领域习以为常的东西。新的IT产品层出不穷，但它们始终都是在硬件和软件上运行的。因此，无论你是想进入一个新的学科，还是想在你目前的领域中深耕，重视基础知识是在IT技术栈这短而浅的变化中长期保持相关性的最佳方式。</p><h2 id="认证？"><a href="#认证？" class="headerlink" title="认证？"></a>认证？</h2><p>不可避免地，我们必须回答一个永远流行的问题：“在自动化时代，IT认证的价值是什么？”这是一个有趣的问题，特别是因为每个人对这个问题都有不同的答案，我们每个人在IT行业中所处的位置不同。</p><p>认证意味着你对所涉及的材料很是熟悉。所以，虽然今天的IT认证存在一些问题，但不可否认的是，这是一个值得探讨的有趣的权衡问题(trade-off)。认证不能在一定程度上灵活地定义你在该领域的能力，但它是具体的并且很受雇主认可。如果没有认证，你就得从头开始每一次面试，并向你的潜在雇主证明你很清楚你所吹出的牛(you know what you’re talking about)。认证是一个很好的方式来简化(short-circuit)面试流程，当然，如果你是IT行业的新人，这是一个非常有用的工具。</p><p>但是，认证会给你带来有一定局限性的东西。当你积累更多的经验时，这种简化(short-circuit)的价值会随着时间的推移而降低。此外，认证通常是先为厂商服务，所以他们不会100%地覆盖你可能想知道的东西。你可能会发现，在你职业生涯的初期，更多的依靠认证是有用的，而随着你经验的积累，你可以更深入地研究基础知识，减少对厂商的依赖，向雇主证明你所知道的一切。</p><p>如果你专注于基础知识，IT认证就会成为一种作战工具，而不是决定职业的教育途径。认证可以完美砍掉招聘过程的初始阶段，对于一些雇主来说，认证是一项要求。但是，了解基础知识不仅能帮助你在面试中脱颖而出，还能确保你在IT风向变化时继续在技术阶梯上攀登。</p><h2 id="自动化会抢走我的工作吗？！"><a href="#自动化会抢走我的工作吗？！" class="headerlink" title="自动化会抢走我的工作吗？！"></a>自动化会抢走我的工作吗？！</h2><p>关于自动化最常见的问题之一是：“我的工作会受影响吗？”的确，人们普遍认为，自动化将意味着工程师数量的减少。毕竟，如果机器可以做我的工作，谁会付钱给我去做手动配置？</p><p>这种想法似乎是基于一些不正确的假设。第一个假设是，自动化在某种程度上是瞬息万变的，是昼夜之间就会发生的，但事实从未如此。自动化总是循序渐进的，而且在每一层都是不完美的。你先解决最简单的问题，然后逐渐向更大的问题进行挑战。你偶尔会回过头来改进你去年写的东西。</p><p>另一个不正确的假设是，一旦实现了自动化，工程师就无事可做了。这也是不正确的，不仅是因为上一段中给出的第一个原因，还因为自动化可以解锁你以前没有的“新技能”。自动化确实可以消除需要一个满腔热血的人来填补某个角色的需求，但自动化会带来前所未有的新挑战，并且那些满腔热血的人应该被重新分配去处理新的问题。所以，虽然某种角色可能会被自动化所取代，但在技术栈更高的位置上，总会有新的机会出现。</p><p>因此，在一个”后自动化”组织中，角色和责任显然将发生变化。你仍然需要优秀的、训练有素的员工，只是需要对他们进行重新分配，以应对引入自动化后发现的新挑战。</p>]]></content>
    
    
    <summary type="html">【译文】在Network Programmability and Automation Skills for the Next-Generation Network Engineer一书的第11章中，作者对于IT教育和技能进行深入的讨论，这对正处在职业迷茫中的我带来了一丝灵感。希望这一段短篇幅的讨论能给读者带来一些思考。</summary>
    
    
    
    <category term="Career" scheme="http://example.com/categories/Career/"/>
    
    
    <category term="网络工程师" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    
    <category term="Future of networking" scheme="http://example.com/tags/Future-of-networking/"/>
    
    <category term="职业发展" scheme="http://example.com/tags/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Top 5 Skills for 2021 [ICT]</title>
    <link href="http://example.com/2021/03/19/Top-5-Skills-for-2021-ICT/"/>
    <id>http://example.com/2021/03/19/Top-5-Skills-for-2021-ICT/</id>
    <published>2021-03-19T12:03:23.000Z</published>
    <updated>2021-04-07T15:02:22.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>往常，笔者是比较反感“人生必读的10本书”、“年度5佳技能”这类标题的。但是我们又常常陷于迷茫，挣扎于寻找目标。有时候，这类文章、视频又帮助我们重新找到了学习目标，也让我们在短时间(视频通常为10分钟左右)再次把握了行家为我们分析的行业前景和机会。</p><p>这类标题有利有弊，当你关闭掉消极情绪的开关，然后换个角度，重新审视这类文章、视频时，会发现它还是可以为你带来灵感。</p><h1 id="Content-of-Video"><a href="#Content-of-Video" class="headerlink" title="Content of Video"></a>Content of Video</h1><h2 id="Time-to-learn"><a href="#Time-to-learn" class="headerlink" title="Time to learn"></a>Time to learn</h2><p><img src="/2021/03/19/Top-5-Skills-for-2021-ICT/Untitled.png" alt="Untitled"></p><p>David提到，当他学习Voice over IP时，他冲在了技术的最前列；接着，整个行业从传统电话网络，改变为Voice over IP。当他学习OpenFlow、网络自动化、网络编程时，他再次冲到了最前列。</p><p>David说他喜欢乘风破浪，因为他认为这样可以加快他的职业生涯。在谈论Top skills之前，他先谈论了职业路径。</p><h2 id="4-Paths"><a href="#4-Paths" class="headerlink" title="4 Paths"></a>4 Paths</h2><p><img src="/2021/03/19/Top-5-Skills-for-2021-ICT/Untitled%201.png" alt="Untitled 1"></p><ul><li>Dev (Development)</li><li>Ethical hacking 文明黑客/ Cybersecurity 网络安全</li><li>Networking</li><li>Analytics / Data Science / ML / AI</li></ul><p>关键点在于选择你所享受的事情。But again，你可以把成为开发者作为你的主要路径，但是也可以拥有很强的网络知识(strong knowledge of networking)；或者，你可以成为一个网络工程师，但是对编程也有深入的理解。所以，成为一个对编程有深入理解的优秀网络工程师。</p><p>用Python作为例子，区分你和别人的地方在于，你在掌握了核心技能的同时，在多个领域也有所涉猎。</p><h2 id="Top-5-skills"><a href="#Top-5-skills" class="headerlink" title="Top 5 skills"></a>Top 5 skills</h2><ul><li>Python —上面4个职业路径，如果你不会Python，都会使你处于劣势；David形容学习它就是<em><strong>it really opens up doors for you。</strong></em></li><li>Linux —The world runs on Linux。无论是在Cloud还是IoT设备上，你都需要掌握Linux。</li><li>Cloud — Networking已经改变多年，从Amazon的AWS变得多么强大，你就能看出Cloud的趋势。你不需要理解AWS，Azure，Google Cloud等中的每一个，但你至少可以去理解一些云技术。</li><li>Networking — 世界依靠网络来连接。如果你是个开发者，理解网络基础同样重要，什么情况下TCP比UDP好使？什么情况下UDP更好？这些基础将帮助你脱颖而出。</li><li>APIs — 同样，APIs在今日世界也非常重要，当我们谈到应用时，它们通过Interfaces交互。</li><li>(Bonus) Virtualization：理解VM与容器的不同点，去了解docker和kubernetes。</li></ul><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>只为学习、记录、分享，取你所需。</p>]]></content>
    
    
    <summary type="html">David Bombal提供的2021能够帮助网工乘风破浪的Top 5技能。虽然标题不讨喜，但建议还是值得一听。</summary>
    
    
    
    <category term="Career" scheme="http://example.com/categories/Career/"/>
    
    
    <category term="网络工程师" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    
    <category term="Future of networking" scheme="http://example.com/tags/Future-of-networking/"/>
    
    <category term="职业发展" scheme="http://example.com/tags/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Any Future for Network Engineers?</title>
    <link href="http://example.com/2021/03/19/Any-Future-for-Network-Engineers/"/>
    <id>http://example.com/2021/03/19/Any-Future-for-Network-Engineers/</id>
    <published>2021-03-19T03:38:05.000Z</published>
    <updated>2021-04-07T15:02:31.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>听了3月11日的David Bombal和Ivan Pepelnjak的对谈(<a class="link" href="https://www.youtube.com/watch?v=LzooeiGxKis">https://www.youtube.com/watch?v=LzooeiGxKis<i class="fas fa-external-link-alt"></i></a>)</p><div class="video-container"><iframe src="https://www.youtube.com/embed/LzooeiGxKis" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>这个对谈主要针对网络自动化和编程的看法进行讨论（当然David作为思科讲师，不免有些恰饭的言论，不过不影响Ivan的观点阐述），围绕怎么定义网工的成功、网络专家的定义、网络自动化与编程的关系、考证的必要性和对年轻人的建议等问题展开。</p><p><img src="/2021/03/19/Any-Future-for-Network-Engineers/cover.jpg" alt="cover"></p><p>David Bombal：</p><ul><li><p>参与了多个新兴产品和技术的自定进度视频培训的创建，在2003年获得CCIE #11023 Emeritus，从事网络相关内容的培训和开发已经超过15年。【From <a class="link" href="https://www.linkedin.com/in/davidbombal/%E3%80%91">https://www.linkedin.com/in/davidbombal/】<i class="fas fa-external-link-alt"></i></a></p></li><li><p>YouTube: <a class="link" href="http://youtube.com/davidbombal">http://youtube.com/davidbombal<i class="fas fa-external-link-alt"></i></a></p></li><li><p>Website: <a class="link" href="https://davidbombal.com/">https://davidbombal.com<i class="fas fa-external-link-alt"></i></a></p></li></ul><p>Ivan Peplnjak：</p><ul><li>Ivan Pepelnjak，CCIE#1354 Emeritus，在网络行业有30年的经验，在设计、安装、故障诊断和运营大型服务提供商和企业WAN和LAN网络方面有25年以上的经验。他目前是ipSpace.net AG的独立网络架构师，专注于软件定义网络、大型数据中心技术和基于IP/MPLS的高级网络。他在思科出版社出版的著作包括《MPLS和VPN架构》和《EIGRP网络设计》。【From <a class="link" href="https://www.linkedin.com/in/ivanpepelnjak/%E3%80%91">https://www.linkedin.com/in/ivanpepelnjak/】<i class="fas fa-external-link-alt"></i></a></li></ul><h1 id="Content-of-Interview"><a href="#Content-of-Interview" class="headerlink" title="Content of Interview"></a>Content of Interview</h1><p>下面是一些相关问题的记录：</p><ul><li>Should I study networking or rather something else? | 我应该学习网络还是其它的？<ul><li>networking will be always be around 网络会一直存在</li><li>对于networking experts的定义，需要从engineering的定义来说；如果你在mechanical engineering中工作，你有你的组成结构，你可以造桥、造火箭、造车；如果你在networking，你有路由器、交换机，你可以构建网络(build networks)；希望的是，在building networks中有「科学」存在，但实际上我们没有，因为厂商反其道而行；</li><li>当然，我们需要不同级别的专家：使用电力传输作为例子，如果你只是设计一栋大楼中的传输系统，这不是微不足道的(trivial)；但这难度显然不如设计跨国的新电力传输线路；找出设计大楼电力系统的人很少也不易找到，并且很贵；但是每个复杂行业都殊途同归，都会达到有各个级别专家的时候；</li></ul></li><li>I’m starting out - will I be successful? | 从入门到成功？<ul><li>又拿mechanical engineering举例，许多工程师在「做工具」，他们都是highly qualified，但是很多人都只有高中文凭，他们「做工具」很多年了，擅长于他们所作，理所应当的他们受人尊敬，收入可观；</li></ul></li><li>Are certs and degrees valuable?【是否推荐年轻人考证】<ul><li>decent certifications有它存在的理由— 有你不得不学的东西；当然，你可能得到engineering的title但是不一定明白其内容的原理(Ivan打趣说，这是完全不同的故事，证书会让你feel great，但事实上你并没有变得great)</li><li>certification is structured, like learning in university。众所周知，你在大学中学到的知识百分之八十可能在你日后不会在有用。</li><li>force you to learn。考证书，可以迫使你去学习，有一个目标在前面，可以让你学习结构化的知识，这或许是对你的工作有帮助的。</li><li>现在年轻人找工作是一种完全错误的方式，你整理你的简历然后每个人都使用相同的CV润色服务(CV polishing service)，导致每个人都用相同的简历，然后每个人又将这些相同的CV投递到互联网上的公开招募中，Hr就会收到100份相同的简历</li></ul></li><li>Young people are struggling? 【年轻人很挣扎，对自己的未来很迷茫】<ul><li>这个问题时，Ivan抛出一个陈述：certs并不能帮助你证明你是否可以给公司带来价值(add value)</li><li>这里David强行让Ivan抛出例子(捂脸尬笑)<ul><li>Find someone who needs his network fixed and do it for free in the evening；然后把自己的这些经历记录(document)下来，当你面试、写简历时，就把这些经历放上去；你干讲自己有证书，是没有用处的，要把这些经历放上去，这才是你的work，证书不是work，不能表现你的价值；</li><li>找到开源项目团队，开源团队可以从能写文档的人那么获得好处，为开源项目团队写文档；不要指望社会、环境会帮你解决这些问题，你要主动地去寻找解决办法；</li></ul></li><li>「The best jobs are the jobs that are created for you because they want you.」到最后，每个人都是在selling yourself，you have to build your brand。（这个观点蛮有趣地，跟《Show Your Work》书中的“Build a good domain name”章节的观点类似）</li><li>Ivan说他花费了很长时间才在presenting stuff中获利，并且他不认为是时代问题(不是现代社交媒体的因素)，是每个时代只有少数人在表达；社交媒体上，因为0.1%的孩子被看到，但是其实大部分还在在面对镜头时无法表达自己。</li><li>不论是writing还是filming，都关乎的是「你如何打造自己这个品牌」(building your brand)。</li></ul></li><li>Ivan认为在tweeter或者LinkedIn上面发表东西都是短暂的，打造自己的博客是一个long-term的项目，并且你可以去掌握一个你所在行业其他人不太熟悉的东西<ul><li>Don’t use WordPress because people use WordPress is use IT not work for IT; If you work for IT, learning something; Put more details on your site and summary on LinkedIn.</li></ul></li><li>如果你想成为一个网络自动化开发者(对从编程人员来说)，你需要先明白网络是如何工作的；</li><li>What about Cisco DevNet certs?<ul><li>如果你已经是一名网工，然后你认为你不得不成为一个程序员，这是一个坏点子；但我们可以在另一个时间成为一个程序员；如果你已经有networking expertise时，学习DevNet是可以的，因为此时你不知道Python和REST API，还有Git或其他需要学习的东西；</li><li>Ivan认为还是要网络专家与专家级的开发者一起工作，是应对网络自动化转型的最佳选择；我们花费10年成为网络专家，再花费10年成为编程专家，这是费时的；</li></ul></li><li>Recommended Path:<ul><li>Short term(3-5 years): automation or cloud</li><li>Long term(over 10 years): fundamentals; IP routing hasn’t changed in 40 years and Internet hasn’t changed in 40 years, 400G Ethernet is just Ethernet</li></ul></li></ul>]]></content>
    
    
    <summary type="html">David Bombal在3月11日(2021)是在Youtube上传了与Ivan Pepelnjak的对话，该对话围绕怎么定义网工的成功、网络专家的定义、网络自动化与编程的关系、考证的必要性和对年轻人的建议等问题展开，笔者在第一时间收看了该视频并对对话内容进行了简单的记录。</summary>
    
    
    
    <category term="Career" scheme="http://example.com/categories/Career/"/>
    
    
    <category term="网络工程师" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    
    <category term="Future of networking" scheme="http://example.com/tags/Future-of-networking/"/>
    
    <category term="职业发展" scheme="http://example.com/tags/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>网络自动化[2]-使用Paramiko配置MSTP场景</title>
    <link href="http://example.com/2021/03/18/Configure-MSTP-with-Paramiko/"/>
    <id>http://example.com/2021/03/18/Configure-MSTP-with-Paramiko/</id>
    <published>2021-03-18T12:13:03.000Z</published>
    <updated>2021-04-07T15:01:55.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试Paramiko配置交换机"><a href="#测试Paramiko配置交换机" class="headerlink" title="测试Paramiko配置交换机"></a>测试Paramiko配置交换机</h1><ul><li><p>拓扑</p><p><img src="/2021/03/18/Configure-MSTP-with-Paramiko/Untitled.png" alt="Untitled"></p></li></ul><h2 id="在SW1上配置SSH-Server、SSH登录用户和密码"><a href="#在SW1上配置SSH-Server、SSH登录用户和密码" class="headerlink" title="在SW1上配置SSH Server、SSH登录用户和密码"></a>在SW1上配置SSH Server、SSH登录用户和密码</h2><ul><li><p>创建密钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[SW1]rsa local-key-pair create </span><br><span class="line">The key name will be: SW1_Host</span><br><span class="line">The range of public key size is (512 ~ 2048). </span><br><span class="line">NOTES: If the key modulus is greater than 512, </span><br><span class="line">       it will take a few minutes.</span><br><span class="line">Input the bits <span class="keyword">in</span> the modulus[default = 512]:2048</span><br><span class="line">Generating keys...</span><br><span class="line">..........++++++++++++</span><br><span class="line">..........++++++++++++</span><br><span class="line">.++++++++</span><br><span class="line">....++++++++</span><br></pre></td></tr></table></figure><p>由于ubuntu 20.04是比较新的版本，不再支持1023bit以下长度的密钥，所以直接配置1024或者2048长度的密钥</p></li><li><p>使能Stelnet服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stelnet server <span class="built_in">enable</span></span><br></pre></td></tr></table></figure></li><li><p>配置SSH</p><ul><li><p>配置SSH用户登录界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user-interface vty 0 4</span><br><span class="line"> authentication-mode aaa</span><br><span class="line"> user privilege level 15</span><br><span class="line"> protocol inbound ssh</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>配置SSH用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh user sht</span><br><span class="line">ssh user sht authentication-type password</span><br><span class="line">ssh user sht service-type stelnet</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>如果SSH用户使用password认证( <code>authentication-type = password | rsa | password-rsa</code> )，则只需要在SSH服务器端生成本地RSA密钥。如果SSH用户使用RSA认证，则在服务器端和客户端都需要生成本地RSA密钥对，并且服务器端和客户端都需要将对方的公钥配置到本地。</p></li><li><p>配置对SSH用户进行password认证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaa</span><br><span class="line"> local-user sht password cipher Huawei</span><br><span class="line"> local-user sht privilege level 15</span><br><span class="line"> local-user sht service-type ssh</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置管理VLAN</p><ul><li><p>创建管理VLAN100</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">vlan 100</span><br><span class="line"> management-vlan</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">interface Vlanif100</span><br><span class="line"> ip address 192.168.50.1 255.255.255.0</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>配置Hybrid接口（关于为什么配置Hybrid口，可以参考<a class="link" href="https://juejin.cn/post/6936785033935978526">网络基础回顾[1]<i class="fas fa-external-link-alt"></i></a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">interface Ethernet0/0/1</span><br><span class="line"> port hybrid pvid vlan 100</span><br><span class="line"> port hybrid untagged vlan 100</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Ubuntu-20-04用SSH远程登录SW1，验证SW1的SSH配置是否生效"><a href="#Ubuntu-20-04用SSH远程登录SW1，验证SW1的SSH配置是否生效" class="headerlink" title="Ubuntu 20.04用SSH远程登录SW1，验证SW1的SSH配置是否生效"></a>Ubuntu 20.04用SSH远程登录SW1，验证SW1的SSH配置是否生效</h2><ul><li><p>在ubuntu 20.04上使用<code>ssh sht@192.168.50.1</code>，出现报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh sht@192.168.50.1</span><br><span class="line">**Unable to negotiate with** 192.168.50.1 port 22: **no matching key exchange method found.** </span><br><span class="line">**Their offer: diffie-hellman-group1-sha1,diffie-hellman-group-exchange-sha1**</span><br></pre></td></tr></table></figure><ul><li><p>问题描述：</p><p>如果客户端和服务器无法就一组共同的参数达成一致，那么连接将失败。OpenSSH (7.0及以上版本)会产生类似这样的错误信息，Ubuntu20.04使用OpenSSH 8.2。在这种情况下，客户端和服务器无法就密钥交换算法达成一致，服务器只提供（即该实验中的SW1）两个方法diffie-hellman-group1-sha1和diffie-hellman-group-exchange-sha1，OpenSSH支持这两种密钥交换方法，但是默认不启用，因为这两种方法版本较久，比较弱(weak)，在所谓的Logjam攻击的理论范围内。所以我们需要在客户端启用较弱的方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -V</span><br><span class="line">OpenSSH_8.2p1 Ubuntu-4ubuntu0.1, OpenSSL 1.1.1f  31 Mar 2020</span><br></pre></td></tr></table></figure></li><li><p>解决方案：</p><p>来源：</p><p><a class="link" href="http://www.openssh.com/legacy.html">OpenSSH: Legacy Options<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 sht@192.168.50.1</span><br></pre></td></tr></table></figure><ul><li><code>+</code> — 在客户端默认集合中增加该交换算法而不是替换默认算法</li><li><code>-o</code> — 选项</li><li><code>-KexAlgorithms</code> — 密钥交换方法-用来生成每个连接的密钥；</li></ul></li></ul></li><li><p>使用<code>ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 sht@192.168.50.1</code>后，成功连接上SW1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 sht@192.168.50.1</span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.50.1 (192.168.50.1)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:BqJmFBxfyFuobgWlC7MmLlpjfu1UjsyhnLbdd/GIVc8.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.50.1<span class="string">&#x27; (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">sht@192.168.50.1&#x27;</span>s password: </span><br><span class="line"></span><br><span class="line">Info: The max number of VTY users is 5, and the number</span><br><span class="line">      of current VTY users on line is 1.</span><br><span class="line">      The current login time is 2021-03-02 19:12:58.</span><br><span class="line">&lt;SW1&gt;sys</span><br><span class="line">Enter system view, <span class="built_in">return</span> user view with Ctrl+Z.</span><br><span class="line">[SW1]</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置paramiko-test-py对SW1进行配置"><a href="#配置paramiko-test-py对SW1进行配置" class="headerlink" title="配置paramiko_test.py对SW1进行配置"></a>配置<code>paramiko_test.py</code>对SW1进行配置</h2><ul><li><p>编写脚本paramiko_test.py</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import paramiko</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">ip_address = <span class="string">&quot;192.168.50.1&quot;</span></span><br><span class="line">username = <span class="string">&quot;sht&quot;</span></span><br><span class="line">password = <span class="string">&quot;Huawei&quot;</span></span><br><span class="line"></span><br><span class="line">ssh_client = paramiko.SSHClient()</span><br><span class="line">ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) <span class="comment"># not recommended for production but fine for labs</span></span><br><span class="line">ssh_client.connect(hostname = ip_address, username = username, password = password)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Successful connection&quot;</span>, ip_address)</span><br><span class="line"></span><br><span class="line">remote_connection = ssh_client.invoke_shell()</span><br><span class="line">remote_connection.send(<span class="string">&quot;system\n&quot;</span>)</span><br><span class="line"><span class="comment"># creation of vlans</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range (2,21):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Creating VLAN &quot;</span> + str(n))</span><br><span class="line">    remote_connection.send(<span class="string">&quot;vlan &quot;</span> + str(n) +  <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    remote_connection.send(<span class="string">&quot;description VLAN &quot;</span> + str(n) +  <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    time.sleep(0.5) <span class="comment"># wait half of second</span></span><br><span class="line">remote_connection.send(<span class="string">&quot;return\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(1)</span><br><span class="line">output = remote_connection.recv(65535)</span><br><span class="line"><span class="built_in">print</span>(output.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"></span><br><span class="line">ssh_client.close</span><br></pre></td></tr></table></figure><h2 id="paramiko-test-py脚本解释"><a href="#paramiko-test-py脚本解释" class="headerlink" title="paramiko_test.py脚本解释"></a><code>paramiko_test.py</code>脚本解释</h2><ul><li><p>第一部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ip_address = <span class="string">&quot;192.168.50.1&quot;</span></span><br><span class="line">username = <span class="string">&quot;sht&quot;</span></span><br><span class="line">password = <span class="string">&quot;Huawei&quot;</span></span><br><span class="line"></span><br><span class="line">ssh_client = paramiko.SSHClient()</span><br><span class="line">ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) <span class="comment"># not recommended for production but fine for labs</span></span><br><span class="line">ssh_client.connect(hostname = ip_address, username = username, password = password)</span><br></pre></td></tr></table></figure><ul><li><p>Paramiko官方文档给出的<code>paramiko.client.SSHClient</code>类的描述为：</p><p>与SSH服务器建立SSH会话的高级表示，该类封装了<strong>Transport</strong>，<strong>Channel</strong>和<strong>SFTPClient</strong>类来处理好认证和打开通道(channel)。</p><p><code>SSHClient</code>的典型使用方式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client = SSHClient()</span><br><span class="line">client.load_system_host_keys()</span><br><span class="line">client.connect(<span class="string">&#x27;ssh.example.com&#x27;</span>)</span><br><span class="line"><span class="comment"># stdin, stdout, stderr = client.exec_command(&#x27;ls -l&#x27;) 暂时不用了解</span></span><br></pre></td></tr></table></figure><p>使用<code>SSHClient()</code>创建SSH客户端，上传脚本的一端作为服务端，然后调用<code>load_system_host_keys(filename = None)</code>读取主机密钥，参数<code>filename</code>默认为<code>None</code>，则会尝试从用户的本地 “known hosts”文件中读取密钥；再调用<code>connect()</code>与<code>hostname</code> 为<code>ssh.example.com</code>的服务器建立连接，服务器的主机密钥会与系统主机密钥 (<code>load_system_host_keys</code>) 和任何本地主机密钥 (<code>load_host_keys</code>) 对照检查，如果在这两组主机密钥中都找不到服务器的主机名，则使用缺失主机密钥策略 (<code>set_missing_host_key_policy</code>)，默认策略是决绝连接并报错<code>SSHException</code>；</p></li><li><p><code>set_missing_host_key_policy(paramiko.AutoAddPolicy( ))</code></p><ul><li><code>set_missing_host_key_policy(policy)</code> 设置连接到<strong>未知主机密钥</strong>的服务器时要使用的策略；<code>policy</code>即要设置的策略类，可以设置为RejectPolicy(默认)、AutoAddPolicy和WarningPolicy等；<strong>如果不配置该策略，默认是拒绝与服务器连接的</strong>。</li><li>将<code>paramiko.AutoAddPolicy()</code> 设为参数，用于<strong>自动将主机名和新的主机密钥添加到本地HostKeys对象中</strong>，并将该对信息保存，该方法由SSHClient调用；</li><li>不仅接受了来自未知主机密钥的服务器提供的公钥，建立了连接，还会将主机名与对应的密钥保存到HostKeys对象中，后面再与该服务器进行连接，就可以使用<code>load_system_host_keys</code>或<code>load_host_keys</code>方法了</li></ul></li></ul></li><li><p>第二部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">remote_connection = ssh_client.invoke_shell()</span><br><span class="line">remote_connection.send(<span class="string">&quot;system\n&quot;</span>)</span><br><span class="line"><span class="comment"># creation of vlans</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">2</span>,<span class="number">21</span>):</span><br><span class="line">    print(<span class="string">&quot;Creating VLAN &quot;</span> + <span class="built_in">str</span>(n))</span><br><span class="line">    remote_connection.send(<span class="string">&quot;vlan &quot;</span> + <span class="built_in">str</span>(n) +  <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    remote_connection.send(<span class="string">&quot;description VLAN &quot;</span> + <span class="built_in">str</span>(n) +  <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>) <span class="comment"># wait half of second</span></span><br><span class="line">remote_connection.send(<span class="string">&quot;return\n&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>remote_connection = ssh_client.invoke_shell()</code><ul><li>由于SSHClient类封装了Channel类，类似socket，使用<code>invoke_shell()</code>后，客户端会在SSH服务器上启动一个交互式shell会话，即用通道类(<strong>Channel</strong>)新建通道(channel)，并按要求的终端类型和大小连接到一个伪终端</li><li><code>ssh_client</code>是SSHClient类的对象，调用SSHClient的方法<code>invoke_shell()</code>后，创建了<code>remote_connection</code>这个通道类(Channel)的通道</li></ul></li><li><code>remote_connection.send()</code><ul><li>通道(Channel)类中的<code>send()</code>用于传输数据</li><li>这里remote_connection是通道(channel)，调用<code>send()</code>方法向SSH服务器发送数据</li></ul></li></ul></li><li><p>第三部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">output = remote_connection.recv(<span class="number">65535</span>)</span><br><span class="line">print(output.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"></span><br><span class="line">ssh_client.close</span><br></pre></td></tr></table></figure><ul><li><p><code>time.sleep(1)</code></p></li><li><p><code>output = remote_connection.recv(65535)</code> 中，<code>remote_connection</code>通道使用<code>recv(65535)</code>设置读取Bytes的最大值；<code>recv()</code>如果返回字节的长度为0时，通道流就会被关闭；</p></li><li><p><code>output.decode(&#39;ascii&#39;)</code> ，<code>recv()</code>的返回值为字节型字符串，将返回值赋值给<code>output</code>变量，然后在Python 3中使用<code>decode(&#39;ascii&#39;)</code>将字节型字符串解析为ascii编码，帮助输出美观的内容；</p><p>如果不适用<code>decode(&#39;ascii&#39;)</code>，输出如下：</p><p><img src="/2021/03/18/Configure-MSTP-with-Paramiko/Untitled%201.png" alt="Untitled 1"></p></li><li><p><code>ssh_client.close</code> 关闭<code>ssh_client</code>；<code>close</code>直接关闭SSHClient类</p></li></ul></li></ul></li></ul><h2 id="将配置推送到-pull-to-设备"><a href="#将配置推送到-pull-to-设备" class="headerlink" title="将配置推送到(pull to)设备"></a>将配置推送到(pull to)设备</h2><ul><li><p>上传到SW1【运行代码】</p><p><img src="/2021/03/18/Configure-MSTP-with-Paramiko/Untitled%202.png" alt="Untitled 2"></p></li><li><p>在SW1上检查脚本配置是否生效</p><p><img src="/2021/03/18/Configure-MSTP-with-Paramiko/Untitled%203.png" alt="Untitled 3"></p><p>脚本成功远程配置SW1上的vlans。</p></li></ul><h1 id="配置MSTP场景"><a href="#配置MSTP场景" class="headerlink" title="配置MSTP场景"></a>配置MSTP场景</h1><h2 id="拓扑规划与设备基础配置"><a href="#拓扑规划与设备基础配置" class="headerlink" title="拓扑规划与设备基础配置"></a>拓扑规划与设备基础配置</h2><ul><li><p>拓扑与规划</p><p><img src="/2021/03/18/Configure-MSTP-with-Paramiko/Untitled%204.png" alt="Untitled 4"></p><ul><li>在MST1中，SwitchA作为根，阻塞SwitchD的Ethernet0/0/2接口</li><li>在MST2中，SwitchB作为根，阻塞SwitchC的Ethernet0/0/2接口</li></ul></li><li><p>交换机基础配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">rsa local-key-pair create </span><br><span class="line">**2048**</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">stelnet server <span class="built_in">enable</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">user-interface vty 0 4</span><br><span class="line"> authentication-mode aaa</span><br><span class="line"> user privilege level 15</span><br><span class="line"> protocol inbound ssh</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">aaa</span><br><span class="line"> local-user sht password cipher Huawei</span><br><span class="line"> local-user sht privilege level 15</span><br><span class="line"> local-user sht service-type ssh</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">ssh user sht</span><br><span class="line">ssh user sht authentication-type password</span><br><span class="line">ssh user sht service-type stelnet</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">vlan 100</span><br><span class="line"> management-vlan</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">interface Vlanif100</span><br><span class="line"> ip address 192.168.50.x 255.255.255.0</span><br></pre></td></tr></table></figure><ul><li><p>SwitchA | SwitchB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">interface Ethernet0/0/1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 100</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">interface Ethernet0/0/2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 100</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">interface Ethernet0/0/3</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 100</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>SwitchC | SwitchD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">interface Ethernet0/0/1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 100</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">interface Ethernet0/0/2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 100</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>验证Ubuntu与各交换机的连通性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -f <span class="string">&quot;/home/sht/.ssh/known_hosts&quot;</span> -R <span class="string">&quot;192.168.50.100&quot;</span></span><br><span class="line"><span class="comment"># $ ssh-keygen -f &quot;/home/sht/.ssh/known_hosts&quot; -R &quot;192.168.50.101&quot;</span></span><br><span class="line"><span class="comment"># $ ssh-keygen -f &quot;/home/sht/.ssh/known_hosts&quot; -R &quot;192.168.50.102&quot;</span></span><br><span class="line"><span class="comment"># $ ssh-keygen -f &quot;/home/sht/.ssh/known_hosts&quot; -R &quot;192.168.50.103&quot;</span></span><br></pre></td></tr></table></figure><p>如果都能成功登录，则说明Ubuntu与交换机连通性良好，并且可以进行远程登录；</p></li></ul><h2 id="编写脚本并上传到设备"><a href="#编写脚本并上传到设备" class="headerlink" title="编写脚本并上传到设备"></a>编写脚本并上传到设备</h2><h3 id="脚本总览"><a href="#脚本总览" class="headerlink" title="脚本总览"></a>脚本总览</h3><ul><li><p>配置内容总览</p><p><img src="/2021/03/18/Configure-MSTP-with-Paramiko/Untitled%205.png" alt="Untitled 5"></p></li><li><p>脚本总览</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">SwitchA = &#123;</span><br><span class="line">    <span class="string">&#x27;ip&#x27;</span>: <span class="string">&#x27;192.168.50.100&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;sht&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;Huawei&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_root&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;primary_instances&#x27;</span>: [<span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;secondary_instances&#x27;</span>: [<span class="string">&#x27;2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;cost_change_interfaces&#x27;</span>: [],</span><br><span class="line">    <span class="string">&#x27;trunk_interfaces&#x27;</span>: [<span class="string">&#x27;e0/0/1&#x27;</span>, <span class="string">&#x27;e0/0/2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;access_interfaces&#x27;</span>: [],</span><br><span class="line">    <span class="string">&#x27;root_interfaces&#x27;</span>:[<span class="string">&#x27;e0/0/2&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SwitchB = &#123;</span><br><span class="line">    <span class="string">&#x27;ip&#x27;</span>: <span class="string">&#x27;192.168.50.101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;sht&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;Huawei&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_root&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;primary_instances&#x27;</span>: [<span class="string">&#x27;2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;secondary_instances&#x27;</span>: [<span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;cost_change_interfaces&#x27;</span>: [],</span><br><span class="line">    <span class="string">&#x27;trunk_interfaces&#x27;</span>: [<span class="string">&#x27;e0/0/1&#x27;</span>, <span class="string">&#x27;e0/0/2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;access_interfaces&#x27;</span>: [],</span><br><span class="line">     <span class="string">&#x27;root_interfaces&#x27;</span>:[<span class="string">&#x27;e0/0/2&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SwitchC = &#123;</span><br><span class="line">    <span class="string">&#x27;ip&#x27;</span>: <span class="string">&#x27;192.168.50.102&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;sht&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;Huawei&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_root&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;primary_instances&#x27;</span>: [<span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;secondary_instances&#x27;</span>: [<span class="string">&#x27;2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;cost_change_interfaces&#x27;</span>: [<span class="string">&#x27;e0/0/2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;trunk_interfaces&#x27;</span>: [<span class="string">&#x27;e0/0/1&#x27;</span>, <span class="string">&#x27;e0/0/2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;access_interfaces&#x27;</span>: [<span class="string">&#x27;e0/0/3&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;root_interfaces&#x27;</span>:[],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SwitchD = &#123;</span><br><span class="line">    <span class="string">&#x27;ip&#x27;</span>: <span class="string">&#x27;192.168.50.103&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;sht&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;Huawei&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_root&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;primary_instances&#x27;</span>: [<span class="string">&#x27;2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;secondary_instances&#x27;</span>: [<span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;cost_change_interfaces&#x27;</span>: [<span class="string">&#x27;e0/0/2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;trunk_interfaces&#x27;</span>: [<span class="string">&#x27;e0/0/1&#x27;</span>, <span class="string">&#x27;e0/0/2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;access_interfaces&#x27;</span>: [<span class="string">&#x27;e0/0/3&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;root_interfaces&#x27;</span>:[],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paramiko_SSH_Command</span>(<span class="params">switch</span>):</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; Start &#x27;&#x27;&#x27;</span></span><br><span class="line">ssh_client = paramiko.SSHClient()</span><br><span class="line">ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) <span class="comment"># not recommended for production but fine for labs</span></span><br><span class="line">ssh_client.connect(hostname = switch[<span class="string">&#x27;ip&#x27;</span>], username = switch[<span class="string">&#x27;username&#x27;</span>], password = switch[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;               &quot;</span>*<span class="number">3</span>)</span><br><span class="line">print(<span class="string">&quot;===============&quot;</span>*<span class="number">3</span>)</span><br><span class="line">print(<span class="string">&quot;               &quot;</span>*<span class="number">3</span>)</span><br><span class="line">print(<span class="string">&quot;Successful connection&quot;</span>, switch[<span class="string">&#x27;ip&#x27;</span>])</span><br><span class="line">remote_connection = ssh_client.invoke_shell()</span><br><span class="line"></span><br><span class="line">remote_connection.send(<span class="string">&quot;system\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; Some Configuration Functions &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">common_Configuration(remote_connection, switch[<span class="string">&#x27;cost_change_interfaces&#x27;</span>], switch[<span class="string">&#x27;secondary_instances&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> switch[<span class="string">&#x27;is_root&#x27;</span>]:</span><br><span class="line">root_PriSec(remote_connection, switch[<span class="string">&#x27;primary_instances&#x27;</span>], switch[<span class="string">&#x27;secondary_instances&#x27;</span>])</span><br><span class="line">edged_port_bpdu_protection(remote_connection, switch[<span class="string">&#x27;access_interfaces&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> switch[<span class="string">&#x27;root_interfaces&#x27;</span>]:</span><br><span class="line">root_protection(remote_connection, switch[<span class="string">&#x27;root_interfaces&#x27;</span>])</span><br><span class="line">conf_trunk_interfaces(remote_connection, switch[<span class="string">&#x27;trunk_interfaces&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> switch == SwitchC:</span><br><span class="line">conf_access_interfaces(remote_connection, switch[<span class="string">&#x27;access_interfaces&#x27;</span>], <span class="number">2</span>)</span><br><span class="line"><span class="keyword">elif</span> switch == SwitchD:</span><br><span class="line">conf_access_interfaces(remote_connection, switch[<span class="string">&#x27;access_interfaces&#x27;</span>], <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; End &#x27;&#x27;&#x27;</span></span><br><span class="line">remote_connection.send(<span class="string">&quot;return\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;save\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;y\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">output = remote_connection.recv(<span class="number">65535</span>)</span><br><span class="line">print(output.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"></span><br><span class="line">ssh_client.close</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common_Configuration</span>(<span class="params">remote_connection, cost_change_interfaces, secondary_instances</span>):</span></span><br><span class="line"><span class="comment"># Stp region_configuration</span></span><br><span class="line">print(<span class="string">&quot;Configuring stp region_configuration ...&quot;</span>)</span><br><span class="line">region_configurations = [<span class="string">&#x27;stp region-configuration\n&#x27;</span>, <span class="string">&#x27;region-name RG1\n&#x27;</span>, <span class="string">&#x27;instance 1 vlan 2 to 10\n&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;instance 2 vlan 11 to 20\n&#x27;</span>, <span class="string">&#x27;active region-configuration\n&#x27;</span>, <span class="string">&#x27;quit\n&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> region_configuration <span class="keyword">in</span> region_configurations:</span><br><span class="line">remote_connection.send(region_configuration)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stp cost computing methods</span></span><br><span class="line">print(<span class="string">&quot;Configuring stp pathcost-standard legacy ...&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;stp pathcost-standard legacy\n&quot;</span>)</span><br><span class="line"><span class="comment"># Stp interface cost</span></span><br><span class="line">print(<span class="string">&quot;Configuring interface cost ...&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> cost_change_interfaces:</span><br><span class="line"><span class="keyword">for</span> secondary_instance <span class="keyword">in</span> secondary_instances:</span><br><span class="line"><span class="keyword">for</span> cost_change_interface <span class="keyword">in</span> cost_change_interfaces:</span><br><span class="line">remote_connection.send(<span class="string">&quot;interface &quot;</span> + cost_change_interface + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;stp instance &quot;</span> + secondary_instance +<span class="string">&quot; cost 20000\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;quit\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># STP enable</span></span><br><span class="line">print(<span class="string">&quot;Creating VLAN and Enabling STP ...&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;vlan batch 2 to 20\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;stp enable\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conf_trunk_interfaces</span>(<span class="params">remote_connection, trunk_interfaces</span>):</span></span><br><span class="line">print(<span class="string">&quot;Configuring trunk interfaces ...&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> trunk_interface <span class="keyword">in</span> trunk_interfaces:</span><br><span class="line">remote_connection.send(<span class="string">&quot;interface &quot;</span> + trunk_interface + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;port link-type trunk\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;port trunk allow-pass vlan 2 to 20\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;quit\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conf_access_interfaces</span>(<span class="params">remote_connection, access_interfaces, access_vlan</span>):</span></span><br><span class="line">print(<span class="string">&quot;Configuring access interfaces ...&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> access_interface <span class="keyword">in</span> access_interfaces:</span><br><span class="line">remote_connection.send(<span class="string">&quot;interface &quot;</span> + access_interface + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;port link-type access\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;port default vlan &quot;</span> + <span class="built_in">str</span>(access_vlan) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;quit\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">root_protection</span>(<span class="params">remote_connection, interfaces</span>):</span></span><br><span class="line">print(<span class="string">&quot;Configuring stp protection ...&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> interface <span class="keyword">in</span> interfaces:</span><br><span class="line">remote_connection.send(<span class="string">&quot;interface &quot;</span> + interface + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;stp root-protection\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;quit\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edged_port_bpdu_protection</span>(<span class="params">remote_connection, interfaces</span>):</span></span><br><span class="line">print(<span class="string">&quot;Configuring edged-port and bpdu protection ...&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> interfaces:</span><br><span class="line"><span class="keyword">for</span> interface <span class="keyword">in</span> interfaces:</span><br><span class="line">remote_connection.send(<span class="string">&quot;interface &quot;</span> + interface + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;stp edged-port enable\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;quit\n&quot;</span>)</span><br><span class="line">remote_connection.send(<span class="string">&quot;stp bpdu-protection\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">root_PriSec</span>(<span class="params">remote_connection, primary_instances, secondary_instances</span>):</span></span><br><span class="line"><span class="comment"># Stp primary root</span></span><br><span class="line">print(<span class="string">&quot;Configuring primary root ...&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> primary_instances:</span><br><span class="line"><span class="keyword">for</span> primary_instance <span class="keyword">in</span> primary_instances:</span><br><span class="line">remote_connection.send(<span class="string">&quot;stp instance &quot;</span> + primary_instance + <span class="string">&quot; root primary\n&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&quot;No primary root configuration.&quot;</span>)</span><br><span class="line"><span class="comment"># Stp secondary root</span></span><br><span class="line">print(<span class="string">&quot;Configuring secondary root ...&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> secondary_instances:</span><br><span class="line"><span class="keyword">for</span> secondary_instance <span class="keyword">in</span> secondary_instances:</span><br><span class="line">remote_connection.send(<span class="string">&quot;stp instance &quot;</span> + secondary_instance + <span class="string">&quot; root secondary\n&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&quot;No secondary root configuration.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">paramiko_SSH_Command(SwitchA)</span><br><span class="line">paramiko_SSH_Command(SwitchB)</span><br><span class="line">paramiko_SSH_Command(SwitchC)</span><br><span class="line">paramiko_SSH_Command(SwitchD)</span><br></pre></td></tr></table></figure></li></ul><h3 id="将配置推送到设备"><a href="#将配置推送到设备" class="headerlink" title="将配置推送到设备"></a>将配置推送到设备</h3><p><img src="/2021/03/18/Configure-MSTP-with-Paramiko/Untitled%206.png" alt="Untitled 6"></p><p><img src="/2021/03/18/Configure-MSTP-with-Paramiko/Untitled%207.png" alt="Untitled 7"></p><h3 id="脚本解析"><a href="#脚本解析" class="headerlink" title="脚本解析"></a>脚本解析</h3><ul><li>使用字典(dict)来规范交换机的配置参数<ul><li>接入层与汇聚层在某些配置上不同，而字典中的键是相同的</li><li>为了后续调用不同方法配置不同配置，没有相应配置的key都设置了空值，函数在被调用时先判断是否为空值；如果为空，则不进行特定功能的配置；如果不为空，则根据键(key)来调用值(value)，进行相应功能的配置；</li></ul></li><li>使用<code>paramiko_SSH_Command(switch)</code>作为一个总方法来调用其余对应各类配置的方法<ul><li>四台交换机的stp region-configuraion配置相同，并且都需要创建相同的VLAN然后使能STP(默认MSTP模式)；除此以外，STP开销都使用华为特有的计算方法；用一个函数<code>common_Configuration</code>封装；</li><li>配置access接口时，汇聚层的SwitchA和SwitchB不需要配置，所以调用<code>conf_access_interfaces(remote_connection, access_interfaces, access_vlan)</code> 时，先判断switch对象是否为SwitchC或SwitchD；根据不同Switch指定的接口PVID也不同，比如SwitchC负责偶数vlan下的主机，而SwitchD负责奇数vlan下的主机，通过匹配SwitchC还是SwitchD，来配置不同的PVID；</li><li>类似于边缘端口的配置<code>edged_port_bpdu_protection</code>，不受一些特殊条件限制 (如不同Switch配置不同PVID)，只是每个交换机上需要配置的接口不同，使能边缘端口命令没有其他参数的参与，就可以先判断需要配置边缘端口的列表是否为空，为空则不进行配置，不为空则for循环调用待配置接口列表，各个接口挨个配置；同理，MSTP根和备用根的配置，也只在SwitchA和SwitchB上进行，通过判断是否为空，就可以避免在SwitchC和SwitchD上配置，然后进一步根据设备字典中的instance相关字段，只在汇聚层设备上调用<code>root_PriSec</code>。</li></ul></li></ul><h2 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h2><p><img src="/2021/03/18/Configure-MSTP-with-Paramiko/Untitled%208.png" alt="Untitled 8"></p><p><img src="/2021/03/18/Configure-MSTP-with-Paramiko/Untitled%209.png" alt="Untitled 9"></p><ul><li><p>查看端口状态和端口保护类型</p><ul><li><p>SwitchA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[SwitchA]display stp brief </span><br><span class="line"> MSTID  Port                        Role  STP State     Protection</span><br><span class="line">...</span><br><span class="line">   1    Ethernet0/0/1               DESI  FORWARDING      NONE</span><br><span class="line">   1    Ethernet0/0/2               DESI  FORWARDING      ROOT</span><br><span class="line">   2    Ethernet0/0/1               ROOT  FORWARDING      NONE</span><br><span class="line">   2    Ethernet0/0/2               DESI  FORWARDING      ROOT</span><br></pre></td></tr></table></figure><ul><li>在MSTI1中，SwitchA为根桥，则Ethernet0/0/1和Ethernet0/0/2成为指定端口；</li><li>在MSTI2中，SwitchA的Ethernet0/0/1成为指定端口，Ethernet0/0/2成为根端口；</li></ul></li><li><p>SwitchB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[SwitchB]display stp brief </span><br><span class="line"> MSTID  Port                        Role  STP State     Protection</span><br><span class="line">...</span><br><span class="line">   1    Ethernet0/0/1               ROOT  FORWARDING      NONE</span><br><span class="line">   1    Ethernet0/0/2               DESI  FORWARDING      ROOT</span><br><span class="line">   2    Ethernet0/0/1               DESI  FORWARDING      NONE</span><br><span class="line">   2    Ethernet0/0/2               DESI  FORWARDING      ROOT</span><br></pre></td></tr></table></figure><ul><li>在MSTI2中，SwitchB为根桥，则Ethernet0/0/1和Ethernet0/0/2成为指定端口；</li><li>在MSTI1中，SwitchB的Ethernet0/0/2成为指定端口，Ethernet0/0/1成为根端口；</li></ul></li><li><p>SwitchC</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;SwitchC&gt;display stp interface Ethernet 0/0/1 brief </span><br><span class="line"> MSTID  Port                        Role  STP State     Protection</span><br><span class="line">..</span><br><span class="line">   1    Ethernet0/0/1               ROOT  FORWARDING      NONE</span><br><span class="line">   2    Ethernet0/0/1               ROOT  FORWARDING      NONE</span><br><span class="line">&lt;SwitchC&gt;display stp interface Ethernet 0/0/2 brief</span><br><span class="line"> MSTID  Port                        Role  STP State     Protection</span><br><span class="line">...</span><br><span class="line">   1    Ethernet0/0/2               DESI  FORWARDING      NONE</span><br><span class="line">   2    Ethernet0/0/2               ALTE  DISCARDING      NONE</span><br></pre></td></tr></table></figure><ul><li>在MSTI1和MSTI2中，Ethernet0/0/1都是根端口；</li><li>在MST1中，Ethernet0/0/2为指定端口；在MST2中，Ethernet0/0/1被阻塞；</li></ul></li><li><p>SwitchD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;SwitchD&gt;display stp interface e0/0/1 brief </span><br><span class="line"> MSTID  Port                        Role  STP State     Protection</span><br><span class="line">...</span><br><span class="line">   1    Ethernet0/0/1               ROOT  FORWARDING      NONE</span><br><span class="line">   2    Ethernet0/0/1               ROOT  FORWARDING      NONE</span><br><span class="line">&lt;SwitchD&gt;display stp interface e0/0/2 brief</span><br><span class="line"> MSTID  Port                        Role  STP State     Protection</span><br><span class="line">...</span><br><span class="line">   1    Ethernet0/0/2               ALTE  DISCARDING      NONE</span><br><span class="line">   2    Ethernet0/0/2               DESI  FORWARDING      NONE</span><br></pre></td></tr></table></figure><ul><li>在MSTI1和MSTI2中，Ethernet0/0/1都是根端口；</li><li>在MST2中，Ethernet0/0/2为指定端口；在MST1中，Ethernet0/0/1被阻塞；</li></ul></li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a class="link" href="http://docs.paramiko.org/en/stable/index.html#core-ssh-protocol-classes">Paramiko documentation<i class="fas fa-external-link-alt"></i></a></li><li>华为S3700配置文档</li></ul><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><ul><li>本文主要在记录自己学习paramiko的过程，旨在提高自己对paramiko的认识和编程能力，规范性不一定强，只是一种探索方式，可能并不能作为一种可靠的学习参考；</li><li>文中有很多内容是转译和自己的所思所想，可能存在多处错误，也拜托大家能够指出错误和不足之处。</li></ul>]]></content>
    
    
    <summary type="html">Paramiko是SSHv2协议的Python实现，同时提供客户端和服务器功能，本文旨在对Paramiko进行粗浅理解，然后再使用Paramiko模块对小型交换局域网进行配置管理；同时，为了避免多设备配置会出现的代码冗余，通过编写函数来达到代码复用的效果。</summary>
    
    
    
    <category term="Network Automation" scheme="http://example.com/categories/Network-Automation/"/>
    
    <category term="eNSP Series" scheme="http://example.com/categories/Network-Automation/eNSP-Series/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="eNSP" scheme="http://example.com/tags/eNSP/"/>
    
    <category term="Network Automation网络自动化" scheme="http://example.com/tags/Network-Automation%E7%BD%91%E7%BB%9C%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="SSH" scheme="http://example.com/tags/SSH/"/>
    
    <category term="Paramiko" scheme="http://example.com/tags/Paramiko/"/>
    
  </entry>
  
  <entry>
    <title>网络自动化[1]-使用华为模拟器eNSP搭建网络自动化场景</title>
    <link href="http://example.com/2021/03/18/Set-up-Network-Automation-Using-Huawei-Emulator-eNSP/"/>
    <id>http://example.com/2021/03/18/Set-up-Network-Automation-Using-Huawei-Emulator-eNSP/</id>
    <published>2021-03-18T12:00:12.000Z</published>
    <updated>2021-04-07T15:01:59.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eNSP安装"><a href="#eNSP安装" class="headerlink" title="eNSP安装"></a>eNSP安装</h1><p>eNSP的安装过程省略，才接触eNSP时，安装会遇到需要问题，这里给出我目前能够正常使用的相关软件版本：</p><ul><li>eNSP 1.3.00.100 V100R003C00 SPC100 （目前eNSP官网已经不再进行更新）</li><li>VirtualBox Version 5.2.40 r137108</li><li>Npcap 1.10</li><li>WinPcap 4.1.3</li></ul><p>eNSP第一次新建拓扑前，记得先注册设备：</p><ul><li><p>右上角找到“菜单‘，然后选中”工具“，单击”注册设备“</p></li><li><p>勾选所有设备，然后点击”注册“</p><p><img src="/2021/03/18/Set-up-Network-Automation-Using-Huawei-Emulator-eNSP/Untitled.png" alt="Untitled"></p></li></ul><h1 id="使用VirtualBox安装自动化Ubuntu-18-04-20-04"><a href="#使用VirtualBox安装自动化Ubuntu-18-04-20-04" class="headerlink" title="使用VirtualBox安装自动化Ubuntu 18.04 | 20.04"></a>使用VirtualBox安装自动化Ubuntu 18.04 | 20.04</h1><ul><li><p>打开VirtualBox，在右上角单击”New“</p><p><img src="/2021/03/18/Set-up-Network-Automation-Using-Huawei-Emulator-eNSP/Untitled%201.png" alt="Untitled 1"></p></li><li><p>分配内存大小 — 根据电脑配置，为虚拟机分配内存，1G或2G都行（当然笔者宿主机内存较大，选择了4G），然后Next继续</p></li><li><p>选择VM，选中”Create a virtual hard disk now“，单击”Create“</p></li><li><p>后面的几步都选择默认勾选 — ”VDI“ + ”Dynamic allocated“</p></li><li><p>分配存储大小，建议配置15G左右，分配太小可能会无法安装，单击”Create“后退回到主界面</p><p><img src="/2021/03/18/Set-up-Network-Automation-Using-Huawei-Emulator-eNSP/Untitled%202.png" alt="Untitled 2"></p></li><li><p>这时选中你刚创建的ubuntu主机，然后单击上方菜单的”Start“运行</p></li><li><p>此时弹出运行界面，你需要选择你要安装的镜像的路径</p><p><img src="/2021/03/18/Set-up-Network-Automation-Using-Huawei-Emulator-eNSP/Untitled%203.png" alt="Untitled 3"></p></li><li><p>后续就会进入ubuntu的安装步骤（此处省略ubuntu后续安装步骤）</p></li></ul><h1 id="配置Ubuntu远程客户端"><a href="#配置Ubuntu远程客户端" class="headerlink" title="配置Ubuntu远程客户端"></a>配置Ubuntu远程客户端</h1><p>这里以ubuntu 18.04为例</p><ul><li><p>重新设置ubuntu 18.04的国内镜像源并刷新列表进行更新</p><p><a class="link" href="https://zhuanlan.zhihu.com/p/61228593">【Ubuntu】Ubuntu 18.04 LTS 更换国内源–解决终端下载速度慢的问题<i class="fas fa-external-link-alt"></i></a></p></li><li><p>安装Python和相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python -y</span><br><span class="line">apt-get install build-essential libssl-dev libffi-dev -y</span><br><span class="line">apt-get install python-pip -y</span><br><span class="line">apt-get install python3-pip -y</span><br></pre></td></tr></table></figure></li><li><p>安装paramiko和netmiko</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install cryptography</span><br><span class="line">pip install paramiko</span><br><span class="line">pip install netmiko</span><br><span class="line">pip3 install paramiko</span><br><span class="line">pip3 install netmiko</span><br></pre></td></tr></table></figure></li></ul><h1 id="使用Telnet来配置S3700"><a href="#使用Telnet来配置S3700" class="headerlink" title="使用Telnet来配置S3700"></a>使用Telnet来配置S3700</h1><ul><li><p>设置Cloud</p><p><img src="/2021/03/18/Set-up-Network-Automation-Using-Huawei-Emulator-eNSP/Untitled%204.png" alt="Untitled 4"></p><p>端口增加完成后，在端口映射入端口和出端口选择不同端口（顺序不影响），然后勾选双向通道，单击”增加“，此时端口映射表会增加一对端口。</p></li><li><p>Cloud设置完毕后，Cloud可以与SW1进行连接了，下图为测试拓扑</p><p><img src="/2021/03/18/Set-up-Network-Automation-Using-Huawei-Emulator-eNSP/Untitled%205.png" alt="Untitled 5"></p></li><li><p>在SW1上配置telnet用户与密码（默认开启telnet）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">aaa</span><br><span class="line"> local-user sht1 password cipher Huawei</span><br><span class="line"> local-user sht1 privilege level 15</span><br><span class="line"> local-user sht1 service-type telnet</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">interface Vlanif1</span><br><span class="line"> ip address 192.168.50.1 255.255.255.0</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">user-interface vty 0 4</span><br><span class="line"> authentication-mode aaa</span><br><span class="line"> user privilege level 15</span><br><span class="line"> protocol inbound all</span><br></pre></td></tr></table></figure></li><li><p>在Ubuntu 18.04上配置telent01.py脚本用于批量创建vlan</p><ul><li><p>Python 3.6 脚本测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python3</span></span><br><span class="line">import getpass</span><br><span class="line">import telnetlib</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&quot;192.168.50.1&quot;</span></span><br><span class="line">user = <span class="string">&quot;sht1&quot;</span></span><br><span class="line">password = getpass.getpass()</span><br><span class="line"></span><br><span class="line">tn = telnetlib.Telnet(HOST)</span><br><span class="line"></span><br><span class="line">tn.read_until(b<span class="string">&quot;Username:&quot;</span>)</span><br><span class="line">tn.write(user.encode(<span class="string">&#x27;ascii&#x27;</span>) + b<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> password:</span><br><span class="line">    tn.read_until(b<span class="string">&quot;Password:&quot;</span>)</span><br><span class="line">    tn.write(password.encode(<span class="string">&#x27;ascii&#x27;</span>) + b<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">tn.write(b<span class="string">&quot;system\n&quot;</span>)</span><br><span class="line">tn.write(b<span class="string">&quot;vlan 2\n&quot;</span>)</span><br><span class="line">tn.write(b<span class="string">&quot;quit\n&quot;</span>)</span><br><span class="line">tn.write(b<span class="string">&quot;vlan 3\n&quot;</span>)</span><br><span class="line">tn.write(b<span class="string">&quot;quit\n&quot;</span>)</span><br><span class="line">tn.write(b<span class="string">&quot;vlan 4\n&quot;</span>)</span><br><span class="line">tn.write(b<span class="string">&quot;quit\n&quot;</span>)</span><br><span class="line">tn.write(b<span class="string">&quot;vlan 5\n&quot;</span>)</span><br><span class="line">tn.write(b<span class="string">&quot;quit\n&quot;</span>)</span><br><span class="line">tn.write(b<span class="string">&quot;return\n&quot;</span>)</span><br><span class="line">tn.write(b<span class="string">&quot;quit\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tn.read_all().decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>Python 2.7 脚本测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python2</span></span><br><span class="line">import getpass</span><br><span class="line">import time</span><br><span class="line">import telnetlib</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&quot;192.168.50.1&quot;</span></span><br><span class="line">user = <span class="string">&quot;sht1&quot;</span></span><br><span class="line">password = getpass.getpass()</span><br><span class="line"></span><br><span class="line">tn = telnetlib.Telnet(HOST)</span><br><span class="line"></span><br><span class="line">tn.read_until(<span class="string">&quot;Username:&quot;</span>)</span><br><span class="line">tn.write(user + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> password:</span><br><span class="line">    tn.read_until(<span class="string">&quot;Password:&quot;</span>)</span><br><span class="line">    tn.write(password + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">tn.write(<span class="string">&quot;system\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;vlan 6\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;q\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;vlan 7\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;q\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;vlan 8\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;q\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;vlan 9\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;q\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;vlan 10\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;q\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;return\n&quot;</span>)</span><br><span class="line">tn.write(<span class="string">&quot;q\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> tn.read_all()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>验证脚本配置是否在SW1上生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[SW1]display vlan </span><br><span class="line">The total number of vlans is : 10</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">U: Up;         D: Down;         TG: Tagged;         UT: Untagged;</span><br><span class="line">MP: Vlan-mapping;               ST: Vlan-stacking;</span><br><span class="line"><span class="comment">#: ProtocolTransparent-vlan;    *: Management-vlan;</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">VID  Type    Ports                                                          </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1    common  UT:Eth0/0/1(U)     Eth0/0/2(D)     Eth0/0/3(D)     Eth0/0/4(D)     </span><br><span class="line">                Eth0/0/5(D)     Eth0/0/6(D)     Eth0/0/7(D)     Eth0/0/8(D)     </span><br><span class="line">                Eth0/0/9(D)     Eth0/0/10(D)    Eth0/0/11(D)    Eth0/0/12(D)    </span><br><span class="line">                Eth0/0/13(D)    Eth0/0/14(D)    Eth0/0/15(D)    Eth0/0/16(D)    </span><br><span class="line">                Eth0/0/17(D)    Eth0/0/18(D)    Eth0/0/19(D)    Eth0/0/20(D)    </span><br><span class="line">                Eth0/0/21(D)    Eth0/0/22(D)    GE0/0/1(D)      GE0/0/2(D)      </span><br><span class="line"></span><br><span class="line">2    common  </span><br><span class="line">3    common  </span><br><span class="line">4    common  </span><br><span class="line">5    common  </span><br><span class="line">6    common  </span><br><span class="line">7    common  </span><br><span class="line">8    common  </span><br><span class="line">9    common  </span><br><span class="line">10   common  </span><br><span class="line"></span><br><span class="line">VID  Status  Property      MAC-LRN Statistics Description      </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">1    <span class="built_in">enable</span>  default       <span class="built_in">enable</span>  <span class="built_in">disable</span>    VLAN 0001                         </span><br><span class="line">2    <span class="built_in">enable</span>  default       <span class="built_in">enable</span>  <span class="built_in">disable</span>    VLAN 0002                         </span><br><span class="line">3    <span class="built_in">enable</span>  default       <span class="built_in">enable</span>  <span class="built_in">disable</span>    VLAN 0003                         </span><br><span class="line">4    <span class="built_in">enable</span>  default       <span class="built_in">enable</span>  <span class="built_in">disable</span>    VLAN 0004                         </span><br><span class="line">5    <span class="built_in">enable</span>  default       <span class="built_in">enable</span>  <span class="built_in">disable</span>    VLAN 0005                         </span><br><span class="line">6    <span class="built_in">enable</span>  default       <span class="built_in">enable</span>  <span class="built_in">disable</span>    VLAN 0006                         </span><br><span class="line">7    <span class="built_in">enable</span>  default       <span class="built_in">enable</span>  <span class="built_in">disable</span>    VLAN 0007                         </span><br><span class="line">8    <span class="built_in">enable</span>  default       <span class="built_in">enable</span>  <span class="built_in">disable</span>    VLAN 0008                         </span><br><span class="line">9    <span class="built_in">enable</span>  default       <span class="built_in">enable</span>  <span class="built_in">disable</span>    VLAN 0009                         </span><br><span class="line">10   <span class="built_in">enable</span>  default       <span class="built_in">enable</span>  <span class="built_in">disable</span>    VLAN 0010</span><br></pre></td></tr></table></figure></li><li><p>虽然配置是完成了，但是在运行脚本的过程中也遇到了问题，目前该问题还没有解决，希望有大佬出面解决</p><p>下面是报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;./telnet01.py&quot;</span>, line 29, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(tn.read_all().decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.6/telnetlib.py&quot;</span>, line 333, <span class="keyword">in</span> read_all</span><br><span class="line">    self.fill_rawq()</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.6/telnetlib.py&quot;</span>, line 524, <span class="keyword">in</span> fill_rawq</span><br><span class="line">    buf = self.sock.recv(65535)</span><br><span class="line">ConnectionResetError: [Errno 104] Connection reset by peer</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;./telnet02.py&quot;</span>, line 34, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span> tn.read_all()</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python2.7/telnetlib.py&quot;</span>, line 385, <span class="keyword">in</span> read_all</span><br><span class="line">    self.fill_rawq()</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python2.7/telnetlib.py&quot;</span>, line 576, <span class="keyword">in</span> fill_rawq</span><br><span class="line">    buf = self.sock.recv(65535)</span><br><span class="line">socket.error: [Errno 104] Connection reset by peer</span><br></pre></td></tr></table></figure></li></ul><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>在eNSP上进行网络自动化学习的灵感来源于Youtube大神David Bombal的网络自动化配置课程，这是一个简单的入门级教学，使用GNS3介绍了Python2.7相关的远程配置，主要包含Telnet，SSH，Paramiko，Netmiko等内容：</p><ul><li><p>笔记【Notion整理】</p><ul><li>Python2.7版本：<a class="link" href="https://www.notion.so/shtisalone/Python-for-Network-Engineers-with-GNS3-01795b82c2e8450ab837f1e523b5a917">https://www.notion.so/shtisalone/Python-for-Network-Engineers-with-GNS3-01795b82c2e8450ab837f1e523b5a917<i class="fas fa-external-link-alt"></i></a></li><li>Python 3版本：<a class="link" href="https://www.notion.so/shtisalone/Python-3-Network-Automation-for-Network-Engineer-742c6abb452a4d1fbeae41e73ed35ab9">https://www.notion.so/shtisalone/Python-3-Network-Automation-for-Network-Engineer-742c6abb452a4d1fbeae41e73ed35ab9<i class="fas fa-external-link-alt"></i></a></li></ul></li><li><p>课程链接：</p><div class="video-container"><iframe src="https://www.youtube.com/embed/videoseries?list=PLhfrWIlLOoKPn7T9FtvbOWX8GxgsFFNwn" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><a class="link" href="https://www.youtube.com/watch?v=-1Z6ygHO--8&amp;list=PLhfrWIlLOoKPn7T9FtvbOWX8GxgsFFNwn">https://www.youtube.com/watch?v=-1Z6ygHO--8&amp;list=PLhfrWIlLOoKPn7T9FtvbOWX8GxgsFFNwn<i class="fas fa-external-link-alt"></i></a></p></li></ul>]]></content>
    
    
    <summary type="html">配置管理往往是网络自动化的开端，模拟器不失为接触网络自动化最方便、最快捷的方式；目前互联网上大多是思科的资料，先有华为设备的相关资料，而笔者希望通过华为模拟器eNSP来对自动化配置管理进行一些小小的探索。</summary>
    
    
    
    <category term="Network Automation" scheme="http://example.com/categories/Network-Automation/"/>
    
    <category term="eNSP Series" scheme="http://example.com/categories/Network-Automation/eNSP-Series/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Telnet" scheme="http://example.com/tags/Telnet/"/>
    
    <category term="eNSP" scheme="http://example.com/tags/eNSP/"/>
    
    <category term="Network Automation网络自动化" scheme="http://example.com/tags/Network-Automation%E7%BD%91%E7%BB%9C%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
</feed>
